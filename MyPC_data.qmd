---
title: "MyPC_data"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
# MyPC_2023 <- read_csv("~/data librarian/MyPC_data/MyPC_2023_siteAndLocationUsage.csv", 
#                       skip = 15)
# MyPC_2024 <- read_csv("~/data librarian/MyPC_data/MyPC_2024_siteAndLocationUsage.csv", 
#                       skip = 15)
# MyPC_2025 <- read_csv("~/data librarian/MyPC_data/MyPC_Mar19_2025_siteAndLocationUsage.csv", 
#                       skip = 15)
# MyPC_all <- rbind(MyPC_2023, MyPC_2024, MyPC_2025)

# View(MyPC_2023)
```

Aggregated MyPC data

```{r}
# drop all test cases
MyPC_public <- MyPC_all %>% 
  filter(Site != "Test") %>% 
  select(-Name)
```

Convert id into character

```{r}
MyPC_public$`Login ID` <- as.character(MyPC_public$`Login ID`)
```


```{r}
# MyPC_public <- read_csv("data/MyPC_2023-2025-public.csv")
# MyPC_public  <- MyPC_public[,-1]
```

# create a new column to parse out the date
```{r}
library(lubridate)

# Create new date variable with lubridate
MyPC_public <- MyPC_public %>%
  mutate(booking_from = mdy_hm(`Booking From`))

MyPC_public <- MyPC_public %>%
  mutate(booking_date = as.Date(`Booking From`, format = "%m/%d/%Y"))

# Create new date variable from login time
# MyPC_public$Booking_time <- format(as.POSIXct(MyPC_public$`Booking From`), format = "%H:%M")
#   # mutate(hms = lubridate::hms(substr(`Booking From`, 11, nchar(`Booking From`))))

MyPC_public <- MyPC_public %>%
 mutate(booking_time = format(booking_from, format = "%H:%M:%S"))
```

# Rename Location and Site columns

```{r}
as.list(unique(MyPC_public$Site))

MyPC_public <- MyPC_public %>%
  rename(Location_detail = Location) %>%
  rename(Location = Site)

```


# standardize location

```{r}
# Create a master location mapping table
location_mapping <- data.frame(
  standard_name = c(
    "Joel D. Valdez-Main", "Himmel Park", "Murphy-Wilmot", "Woods Memorial",
    "Valencia", "Martha Cooper", "Flowing Wells", "Sahuarita",
    "Wheeler Taft Abbett", "Miller-Golf Links", "Eckstrom-Columbus",
    "Santa Rosa", "Sam Lena-South Tucson", "Oro Valley", "Quincie Douglas",
    "Bookmobile/Readrunners", "Caviglia-Arivaca", "Dewhirst-Catalina", 
    "Dusenberry-River", "El Rio", "Frank De La Cruz-El Pueblo",
    "Joyner-Green Valley", "Kirk-Bear Canyon", "Nanini", 
    "Richard Elias-Mission", "Salazar-Ajo", "Southwest",
    "W. Anne Gibson-Esmond Station", "Web Renewal"
  ),
  stringsAsFactors = FALSE
)

# Function to standardize location names
standardize_location <- function(location) {
  # Remove common suffixes
  location <- gsub(" Branch Library$|\\s+Library$", "", location)
  
  # Handle specific cases
  location <- gsub("^Joel Valdez Main$", "Joel D. Valdez-Main", location)
  location <- gsub("^Joel D Valdez Main$", "Joel D. Valdez-Main", location)
  location <- gsub("^Bookmobile-Readrunners$", "Bookmobile/Readrunners", location)
  location <- gsub("^Quincie Douglas$", "Quincie Douglas", location)
  location <- gsub("^Virtual Library$", "Web Renewal", location)
  
  # Return the standardized name
  return(location)
}

# Apply standardization to each dataset
standardize_dataset <- function(df, location_col_name) {
  if(location_col_name %in% colnames(df)) {
    df$Location_Standard <- standardize_location(df[[location_col_name]])
    return(df)
  } else {
    warning(paste("Column", location_col_name, "not found in dataset"))
    return(df)
  }
}

# Apply to all three datasets
MyPC_public <- standardize_dataset(MyPC_public, "Location")


# # For merging datasets
# merge_by_location <- function(df1, df2, by.x = "Location_Standard", by.y = "Location_Standard", ...) {
#   merge(df1, df2, by.x = by.x, by.y = by.y, ...)
# }

```

```{r}
as.list(unique(MyPC_public$Location_Standard))
```

# START
```{r}
# Open MyPC data
MyPC_public <- read_csv("data/MyPC_2023-2025-public.csv")
MyPC_public <- MyPC_public[,-1]
```

## generate a consistent ID

```{r}
generate_consistent_logins <- function(logins) {
  # Create a unique mapping of original names to masked IDs
  unique_names <- unique(logins)
  masked_logins <- paste0("ID_", sprintf("%04d", seq_along(unique_names)))
  
  # Create a named vector for easy lookup
  login_mapping <- setNames(masked_logins, unique_names)
  
  # Map the original names to their consistent masked IDs
  return(login_mapping[logins])
}

# Generate consistent masked IDs
MyPC_public$masked_logins <- generate_consistent_logins(MyPC_public$`Login ID`)

# Create a lookup table
lookup_table_reporter <- MyPC_public %>%
  select(original_name = `Login ID`, masked_logins) %>%
  distinct()

```

```{r}
# remove orig login from new table
MyPC_public <- MyPC_public %>% 
  select(-`Login ID`)
```

```{r}
names(MyPC_public)
```

# START
```{r}
# Open MyPC data
MyPC_public <- read_csv("data/MyPC_2023-2025-public.csv")
MyPC_public <- MyPC_public[,-1]
```

## graph with plotly
```{r}
# make tables similar to pits
library(plotly)
library(dplyr)
library(crosstalk)
library(lubridate)
library(htmltools)
# First, prepare the data
MyPC_public <- MyPC_public %>%
  mutate(
    # # Make sure booking_from is properly parsed
    # booking_from = if(!inherits(`Booking From`, "POSIXct")) 
    #                  as.POSIXct(`Booking From`) else `Booking From`,
    # Extract hour for grouping
    hour_of_day = hour(booking_from),
    hour_label = paste0(hour_of_day, ":00")
  )

# Aggregate data by hour and location
hourly_usage <- MyPC_public %>%
  group_by(hour_label, Location_Standard, booking_date) %>%
  summarize(count = n(), .groups = "drop") %>%
  arrange(as.numeric(substr(hour_label, 1, 2)))

# Create shared data object for filtering
sd4 <- SharedData$new(hourly_usage)

# Create the plotly visualization
p4 <- plot_ly(sd4, 
             x = ~hour_label, 
             y = ~count, 
             color = ~Location_Standard, 
             type = "bar",
             hovertemplate = ~paste(
               "Hour: ", hour_label,
               "<br>Location: ", Location_Standard,
               "<br>Count: ", count,
               "<br>Date: ", format(booking_date, "%Y-%m-%d"),
               "<extra></extra>"
             )) %>%
  layout(
    title = "Computer Usage by Hour of Day",
    xaxis = list(
      title = "Hour of Day", 
      tickangle = 45,
      categoryorder = "array",
      categoryarray = paste0(0:23, ":00")
    ),
    yaxis = list(title = "Number of Sessions"),
    barmode = "stack",
    hovermode = "compare",
     showlegend = FALSE  # Remove legend
  )
# Create the filter controls
# filters <- list(
#   filter_select("Location_Standard", "Location", sd, ~Location_Standard, multiple = TRUE),
#   filter_slider("booking_date", "Date Range", sd, ~booking_date, width = "100%")
# )

# Create the filter panel correctly

filter_panel4 <- list(
  filter_slider("booking_date", "Date Range", sd4, ~booking_date, width = "100%"),
  filter_select("Location", "Location", sd4, ~Location_Standard, multiple = TRUE)
)

bscols(
  widths = c(3, 9),
  filter_panel4,
  p4
)
```
# SHINY APP for my pc interactive
```{r}
library(shiny)
library(plotly)
library(dplyr)
library(crosstalk)
library(lubridate)


# # Prepare the data
# MyPC_public <- MyPC_public %>%
#   mutate(
#     hour_of_day = hour(booking_from),
#     hour_label = paste0(hour_of_day, ":00")
#   )
# 
# # Aggregate data
# hourly_usage <- MyPC_public %>%
#   group_by(hour_label, Location_Standard, booking_date) %>%
#   summarise(count = n(), .groups = "drop") %>%
#   arrange(as.numeric(substr(hour_label, 1, 2)))

# Create a shared data object
sd4 <- SharedData$new(hourly_usage)

# Define UI
ui <- fluidPage(
  titlePanel("Computer Usage by Hour"),
  sidebarLayout(
    sidebarPanel(
      filter_slider("booking_date", "Date Range", sd4, ~booking_date, width = "100%"),
      filter_select("Location_Standard", "Location", sd4, ~Location_Standard, multiple = TRUE)
    ),
    mainPanel(
      plotlyOutput("usage_plot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  output$usage_plot <- renderPlotly({
    plot_ly(sd4, 
            x = ~hour_label, 
            y = ~count, 
            color = ~Location_Standard, 
            type = "bar",
            hovertemplate = ~paste(
              "Hour: ", hour_label,
              "<br>Location: ", Location_Standard,
              "<br>Count: ", count,
              "<br>Date: ", format(booking_date, "%Y-%m-%d"),
              "<extra></extra>"
            )) %>%
      layout(
        title = "Computer Usage by Hour of Day",
        xaxis = list(
          title = "Hour of Day", 
          tickangle = 45,
          categoryorder = "array",
          categoryarray = paste0(0:23, ":00")
        ),
        yaxis = list(title = "Number of Sessions"),
        barmode = "stack",
        hovermode = "compare",
        showlegend = FALSE
      )
  })
}

# Run the app
shinyApp(ui, server)

# http://127.0.0.1:5659/
# rsconnect::writeManifest()
```
# deploy shiny app
```{r}
library(rsconnect)
```


# bring in public pits data
```{r}
# library(readr)
# PITS_2023_2025_public <- read_csv("pits2023-2025-public.csv")
# PITS_2023_2025_public  <- PITS_2023_2025_public [,-1]
```

# create a ratio table

```{r}
library(dplyr)
library(plotly)
library(crosstalk)
library(htmltools)

# subset data to 2024
PITS_2024_2025_public <- PITS_2023_2025_public %>% 
  filter(Date2 >= as.Date("2024-01-01"))  # Adjust date range as needed

# Step 1: Prepare and aggregate both datasets
# Aggregate PITS data by location and date
PITS_counts <- PITS_2024_2025_public %>%
  # Make sure date is in proper format
  mutate(date = as.Date(Date2)) %>%
  group_by(Location_Standard, date) %>%
  summarize(infraction_count = n(), .groups = "drop")

# subset data to 2024
MyPC_2024_2025_public <- MyPC_public %>% 
  filter(booking_date >= as.Date("2024-01-01")) 

# Aggregate MyPC data by location and date
MyPC_counts <- MyPC_2024_2025_public %>%
  # select(booking_date, Location_Standard) %>%
  # Make sure date is in proper format
  # mutate(date = as.Date(`Booking From`)) %>%
  rename(date = booking_from) %>%
  group_by(Location_Standard, date) %>%
  summarize(user_count = n(), .groups = "drop")

# Step 2: Join the datasets
ratio_data2024 <- MyPC_counts %>%
  full_join(PITS_counts, by = c("Location_Standard", "date")) %>%
  # Handle any missing values
  mutate(
    infraction_count = ifelse(is.na(infraction_count), 0, infraction_count),
    user_count = ifelse(is.na(user_count), 0, user_count)
  ) %>%
  filter(date >= as.Date("2024-01-01"))  # Adjust date range as needed

# Step 3: Calculate the ratio
ratio_data2024 <- ratio_data2024 %>%
  # Avoid division by zero
  mutate(
    ratio = ifelse(user_count > 0, infraction_count / user_count, 0),
    # Multiply by 100 to get percentage
    ratio_percentage = ratio * 100
  )

# Step 4: Create the interactive visualization
# Create shared data object for filtering
sd5 <- SharedData$new(ratio_data2024)

# # Create the plotly visualization
p5 <- plot_ly(sd5,
             x = ~date,
             y = ~ratio_percentage,
             color = ~Location_Standard,
             type = "scatter",
             mode = "lines+markers",
             hovertemplate = ~paste(
               "Date: ", format(date, "%Y-%m-%d"),
               "<br>Location: ", Location_Standard,
               "<br>Infractions: ", infraction_count,
               "<br>Users: ", user_count,
               "<br>Ratio: ", sprintf("%.2f%%", ratio_percentage),
               "<extra></extra>"
             )) %>%
  layout(
    title = "Ratio of PITS Infractions to MyPC Users by Location",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Infraction Rate (%)"),
    hovermode = "closest"
  )

# Create the filter panel
location_filter <- filter_select("location", "Location", sd5, ~Location_Standard, multiple = TRUE)
date_filter <- filter_slider("date", "Date Range", sd5, ~date, width = "100%")

# Combine the filters and plot
# bscols(
#   widths = c(3, 9),
#   div(
#     location_filter,
#     date_filter
#   ),
#   p5
# )
```

# filterable data table

```{r}
library(dplyr)
library(DT)
library(crosstalk)
library(data.table)

# Prepare the data
summary_table <- ratio_data2024 %>%
  group_by(Location_Standard, date) %>%
  summarize(
    Total_Users = sum(user_count, na.rm = TRUE),
    Total_Infractions = sum(infraction_count, na.rm = TRUE),
    Average_Daily_Users = mean(user_count, na.rm = TRUE),
    Average_Daily_Infractions = mean(infraction_count, na.rm = TRUE),
    
    # Calculate ratio per 1000 users
    Infractions_Per_1000_Users = ifelse(
      Total_Users > 0, 
      (Total_Infractions / Total_Users) * 1000, 
      0
    )
  ) %>%
  # Round numeric columns to 2 decimal places
  mutate(
    Total_Users = ifelse(Total_Users == 0, 0.1, Total_Users),
    Average_Daily_Users = round(Average_Daily_Users, 2),
    Average_Daily_Infractions = round(Average_Daily_Infractions, 2),
    Infractions_Per_1000_Users = round(Infractions_Per_1000_Users, 2)
  )

# # Create the interactive DataTable with server-side processing
# datatable(summary_table, 
#           filter = "top",
#           # extensions = 'Buttons', 
#           options = list(
#             processing = TRUE,
#             serverSide = TRUE,
#             pageLength = 10,
#             lengthMenu = c(10, 25, 50, 100),
#             dom = 'Bfrtip',
#             # buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
#           ),
#           rownames = FALSE)
```
# KableExtra Table for ratio
```{r}
library(dplyr)
library(kableExtra)
library(htmlwidgets)
# Aggregate data to get total summary
ratio_summary_table <- ratio_data2024 %>%
  group_by(Location_Standard) %>%
  summarize(
    Total_Users = sum(user_count, na.rm = TRUE),
    Total_Infractions = sum(infraction_count, na.rm = TRUE),
    Average_Daily_Users = mean(user_count, na.rm = TRUE),
    # Average_Daily_Infractions = mean(infraction_count, na.rm = TRUE),
    
    # Calculate ratio per 1000 users
    Infractions_Per_1000_Users = ifelse(
      Total_Users > 0, 
      (Total_Infractions / Total_Users) * 1000, 
      0
    )
  ) %>%
  # Round numeric columns
  mutate(
    Total_Users = round(ifelse(Total_Users == 0, 0.1, Total_Users), 0),  # Ensuring whole number
    Average_Daily_Users = round(Average_Daily_Users, 2),
    # Average_Daily_Infractions = round(Average_Daily_Infractions, 2),
    Infractions_Per_1000_Users = round(Infractions_Per_1000_Users, 2)
  ) %>%
  # Arrange by Infractions per 1000 Users in descending order
  arrange(desc(Infractions_Per_1000_Users)) 



# Create an interactive, formatted table
ratio_html <- ratio_summary_table %>%
  kable("html", 
        col.names = c(
          "Location", 
          "Total Users", 
          "Total Infractions", 
          "Avg Daily Users", 
          # "Avg Daily Infractions", 
          "Infractions per 1000 Users"
        )) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  ) %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(5, color = "blue") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#428bca")


# # Save as an HTML file
# htmlwidgets::saveWidget(ratio_html, file = "ratio_summary_table.html", selfcontained = TRUE)
# writeLines(ratio_html, "ratio_summary_table.html")
write(ratio_html, file = "ratio_summary_table.html")

# # Open the file in browser
# browseURL("summary_table.htm")

```

# TABLE open in browser
```{r}
library(dplyr)
library(kableExtra)
library(htmltools)

# Aggregate data
summary_table2 <- ratio_data2024 %>%
  group_by(Location_Standard) %>%
  summarize(
    Total_Users = sum(user_count, na.rm = TRUE),
    Total_Infractions = sum(infraction_count, na.rm = TRUE),
    Average_Daily_Users = mean(user_count, na.rm = TRUE),
    # Average_Daily_Infractions = mean(infraction_count, na.rm = TRUE),
    Infractions_Per_1000_Users = ifelse(Total_Users > 0, (Total_Infractions / Total_Users) * 1000, 0)
  ) %>%
  mutate(
    Total_Users = round(ifelse(Total_Users == 0, 0.1, Total_Users), 0),
    Average_Daily_Users = round(Average_Daily_Users, 2),
    # Average_Daily_Infractions = round(Average_Daily_Infractions, 2),
    Infractions_Per_1000_Users = round(Infractions_Per_1000_Users, 2)
  ) %>%
  arrange(desc(Infractions_Per_1000_Users)) 

# Create a properly formatted kable table
table_html <- summary_table2 %>%
  kable("html", 
        col.names = c(
          "Location", "Total Users", "Total Infractions", 
          "Avg Daily Users", "Infractions per 1000 Users"
        )) %>%
   add_header_above(c("PITS Incidents per 1000 PC Users (Jan 2024 - Mar 2025)" = 5)) %>%  # Add table title spanning all 4 columns
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  ) %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(5, color = "blue") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#428bca")

# Wrap it in a full HTML document
html_page <- htmltools::HTML(
  paste0(
    "<html><head><meta charset='UTF-8'><title>Summary Table</title>",
    "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css'>",
    "</head><body style='margin: 20px;'>",
    as.character(table_html),
    "</body></html>"
  )
)

# Save the table as an HTML file
html_file <- "ratio_summary_table.html"
writeLines(as.character(html_page), html_file)

# Open in browser
browseURL(html_file)

```


# DO NOT RUN create a ratio graph CODE freezes computer

```{r}
# ratio visualization
# Add a second plot showing the raw counts
counts_plot <- plot_ly(sd5) %>%
  add_trace(
    x = ~date,
    y = ~infraction_count,
    name = "Infractions",
    type = "bar",
    marker = list(color = "red")
  ) %>%
  add_trace(
    x = ~date,
    y = ~user_count,
    name = "Users",
    type = "bar",
    marker = list(color = "blue")
  ) %>%
  layout(
    title = "Raw Counts: Infractions vs Users",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Count"),
    barmode = "group"
  )

# Display both plots
bscols(
  widths = c(3, 9),
  div(
    location_filter,
    date_filter
  ),
  div(
    p5,
    counts_plot
  )
)

```

### Save csv

```{r}
write.csv(MyPC_public, "MyPC_2023-2025-public.csv")
write.csv(hourly_usage, "MyPChourly_usage.csv")

```
